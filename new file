<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    /* Reduce space between td elements and add padding-bottom */
    .table td,
    .table th {
      padding-bottom: 1px;
      white-space: nowrap; /* Prevent text wrap */
      position: relative; /* Enable positioning for hover text */
    }

    .table td:hover::after,
    .table th:hover::after {
      content: attr(data-hover-text);
      position: absolute;
      left: 0;
      top: 100%;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 1000;
      display: block;
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Table Headers -->
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th>
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns()">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th>Column 5</th>
      </tr>
    </thead>
    <tbody>
      <!-- Dynamic Data Rows -->
      {% for row in table_data %}
      <tr>
        <td>{{ row.col1 }}</td>
        <td>{{ row.col2 }}</td>
        <td>{{ row.col3 }}</td>
        <td class="extra-column" colspan="5">
          <td>{{ row.extra6 }}</td>
          <td>{{ row.extra7 }}</td>
          <td>{{ row.extra8 }}</td>
          <td>{{ row.extra9 }}</td>
          <td>{{ row.extra10 }}</td>
        </td>
        <td>{{ row.col6 }}</td>
        <td>{{ row.col7 }}</td>
        <td>{{ row.col8 }}</td>
        <td>{{ row.col9 }}</td>
        <td>{{ row.col10 }}</td>
        <td>{{ row.col5 }}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns() {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      column.classList.toggle('d-none'); // Toggle Bootstrap's d-none class to hide/show
    });

    var button = document.querySelector('.accordion-header button');

    // Toggle button text and class for collapsed/expanded state
    if (button.textContent === '+') {
      button.textContent = '-';
      button.classList.add('collapsed');
    } else {
      button.textContent = '+';
      button.classList.remove('collapsed');
    }
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


v2


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    /* Reduce space between td elements and add padding-bottom */
    .table td,
    .table th {
      padding-bottom: 1px;
      white-space: nowrap; /* Prevent text wrap */
      position: relative; /* Enable positioning for hover text */
    }

    .table td:hover::after,
    .table th:hover::after {
      content: attr(data-hover-text);
      position: absolute;
      left: 0;
      top: 100%;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 1000;
      display: block;
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Table Headers -->
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th class="accordion-header">
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns(this)">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th>Column 5</th>
      </tr>
    </thead>
    <tbody>
      {% for row in table_data %}
        <tr>
          <td>{{ row.0 }}</td>
          <td>{{ row.1 }}</td>
          <td>{{ row.2 }}</td>
          <td>{{ row.3 }}</td>
          <td class="extra-column">{{ row.5 }}</td>
          <td class="extra-column">{{ row.6 }}</td>
          <td class="extra-column">{{ row.7 }}</td>
          <td class="extra-column">{{ row.8 }}</td>
          <td class="extra-column">{{ row.9 }}</td>
          <td>{{ row.4 }}</td>
        </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns(button) {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Check if columns are currently hidden or visible
    var isHidden = Array.from(extraColumns).every(column => column.style.display === 'none' || column.style.display === '');

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      column.style.display = isHidden ? 'table-cell' : 'none';
    });

    // Toggle button text and class for collapsed/expanded state
    button.textContent = isHidden ? '-' : '+';
    button.classList.toggle('collapsed', !isHidden);
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>

v4

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    /* Reduce space between td elements and add padding-bottom */
    .table td,
    .table th {
      padding-bottom: 1px;
      white-space: nowrap; /* Prevent text wrap */
      position: relative; /* Enable positioning for hover text */
    }

    .table td:hover::after,
    .table th:hover::after {
      content: attr(data-hover-text);
      position: absolute;
      left: 0;
      top: 100%;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 1000;
      display: block;
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Define column widths -->
    <colgroup>
      <col style="width: 10%">
      <col style="width: 10%">
      <col style="width: 10%">
      <col style="width: 10%">
      <col class="extra-column" style="width: 10%">
      <col class="extra-column" style="width: 10%">
      <col class="extra-column" style="width: 10%">
      <col class="extra-column" style="width: 10%">
      <col class="extra-column" style="width: 10%">
      <col style="width: 10%">
    </colgroup>

    <!-- Table Headers -->
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th class="accordion-header">
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns(this)">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th>Column 5</th>
      </tr>
    </thead>
    <tbody>
      <!-- Static Data Rows -->
      <tr>
        <td>Data 1.1</td>
        <td>Data 1.2</td>
        <td>Data 1.3</td>
        <td>Data 1.4</td>
        <td class="extra-column">Data 1.6</td>
        <td class="extra-column">Data 1.7</td>
        <td class="extra-column">Data 1.8</td>
        <td class="extra-column">Data 1.9</td>
        <td class="extra-column">Data 1.10</td>
        <td>Data 1.5</td>
      </tr>
      <tr>
        <td>Data 2.1</td>
        <td>Data 2.2</td>
        <td>Data 2.3</td>
        <td>Data 2.4</td>
        <td class="extra-column">Data 2.6</td>
        <td class="extra-column">Data 2.7</td>
        <td class="extra-column">Data 2.8</td>
        <td class="extra-column">Data 2.9</td>
        <td class="extra-column">Data 2.10</td>
        <td>Data 2.5</td>
      </tr>
      <tr>
        <td>Data 3.1</td>
        <td>Data 3.2</td>
        <td>Data 3.3</td>
        <td>Data 3.4</td>
        <td class="extra-column">Data 3.6</td>
        <td class="extra-column">Data 3.7</td>
        <td class="extra-column">Data 3.8</td>
        <td class="extra-column">Data 3.9</td>
        <td class="extra-column">Data 3.10</td>
        <td>Data 3.5</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns(button) {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Check if columns are currently hidden or visible
    var isHidden = Array.from(extraColumns).every(column => column.style.display === 'none' || column.style.display === '');

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      column.style.display = isHidden ? 'table-cell' : 'none';
    });

    // Toggle button text and class for collapsed/expanded state
    button.textContent = isHidden ? '-' : '+';
    button.classList.toggle('collapsed', !isHidden);
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* General Table Styling */
    .table {
      width: 100%;
      border-collapse: collapse;
      table-layout: fixed; /* Ensure fixed table layout */
    }

    .table th,
    .table td {
      padding: 8px;
      text-align: left;
      border: 1px solid #ccc;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    /* Column Widths Before Expanding */
    .before-expand th:nth-child(1),
    .before-expand td:nth-child(1) { width: 15%; }
    .before-expand th:nth-child(2),
    .before-expand td:nth-child(2) { width: 15%; }
    .before-expand th:nth-child(3),
    .before-expand td:nth-child(3) { width: 15%; }
    .before-expand th:nth-child(4),
    .before-expand td:nth-child(4) { width: 15%; }
    .before-expand th:nth-child(5),
    .before-expand td:nth-child(5) { width: 40%; }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    /* Column Widths After Expanding */
    .expanded th:nth-child(1),
    .expanded td:nth-child(1) { width: 10%; }
    .expanded th:nth-child(2),
    .expanded td:nth-child(2) { width: 10%; }
    .expanded th:nth-child(3),
    .expanded td:nth-child(3) { width: 10%; }
    .expanded th:nth-child(4),
    .expanded td:nth-child(4) { width: 10%; }
    .expanded .extra-column:nth-child(5),
    .expanded .extra-column:nth-child(5) { width: 10%; }
    .expanded .extra-column:nth-child(6),
    .expanded .extra-column:nth-child(6) { width: 10%; }
    .expanded .extra-column:nth-child(7),
    .expanded .extra-column:nth-child(7) { width: 10%; }
    .expanded .extra-column:nth-child(8),
    .expanded .extra-column:nth-child(8) { width: 10%; }
    .expanded .extra-column:nth-child(9),
    .expanded .extra-column:nth-child(9) { width: 10%; }
    .expanded th:nth-child(10),
    .expanded td:nth-child(10) { width: 10%; }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <thead>
      <tr class="before-expand">
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th class="accordion-header">
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns(this)">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th>Column 5</th>
      </tr>
    </thead>
    <tbody>
      <tr class="before-expand">
        <td>Data 1.1</td>
        <td>Data 1.2</td>
        <td>Data 1.3</td>
        <td>Data 1.4</td>
        <td class="extra-column">Data 1.6</td>
        <td class="extra-column">Data 1.7</td>
        <td class="extra-column">Data 1.8</td>
        <td class="extra-column">Data 1.9</td>
        <td class="extra-column">Data 1.10</td>
        <td>Data 1.5</td>
      </tr>
      <tr class="before-expand">
        <td>Data 2.1</td>
        <td>Data 2.2</td>
        <td>Data 2.3</td>
        <td>Data 2.4</td>
        <td class="extra-column">Data 2.6</td>
        <td class="extra-column">Data 2.7</td>
        <td class="extra-column">Data 2.8</td>
        <td class="extra-column">Data 2.9</td>
        <td class="extra-column">Data 2.10</td>
        <td>Data 2.5</td>
      </tr>
      <tr class="before-expand">
        <td>Data 3.1</td>
        <td>Data 3.2</td>
        <td>Data 3.3</td>
        <td>Data 3.4</td>
        <td class="extra-column">Data 3.6</td>
        <td class="extra-column">Data 3.7</td>
        <td class="extra-column">Data 3.8</td>
        <td class="extra-column">Data 3.9</td>
        <td class="extra-column">Data 3.10</td>
        <td>Data 3.5</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns(button) {
    var table = document.querySelector('.table');
    table.classList.toggle('expanded'); // Toggle the expanded class on the table

    // Toggle button text and class for collapsed/expanded state
    var isCollapsed = button.classList.toggle('collapsed');
    button.textContent = isCollapsed ? '+' : '-';
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


hover text

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table {
      width: 100%;
      border-collapse: collapse; /* Remove space between cells */
      table-layout: fixed; /* Ensure fixed table layout */
    }

    .table th,
    .table td {
      padding: 8px; /* Adjust padding as needed */
      text-align: left;
      border: 1px solid #ccc;
      white-space: nowrap; /* Prevent text wrap */
      overflow: hidden; /* Hide overflow text */
      text-overflow: ellipsis; /* Show ellipsis for overflow text */
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <colgroup>
      <col style="width: 10%">
      <col style="width: 10%">
      <col style="width: 10%">
      <col style="width: 10%">
      <col class="extra-column"> <!-- Initially hidden extra columns -->
      <col class="extra-column">
      <col class="extra-column">
      <col class="extra-column">
      <col class="extra-column">
      <col style="width: 10%">
    </colgroup>

    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th class="accordion-header">
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns()">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th>Comments</th>
      </tr>
    </thead>
    <tbody>
      {% for row in data %}
      <tr>
        {% for item in row %}
        <td class="{% if forloop.counter > 4 and forloop.counter < 10 %}extra-column{% endif %}" data-bs-toggle="tooltip" data-bs-placement="top" title="{{ item }}">
          {{ item|safe }}
        </td>
        {% endfor %}
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
<script>
  function toggleExtraColumns() {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      column.style.display = column.style.display === 'none' ? 'table-cell' : 'none';
    });

    // Toggle button class for collapsed/expanded state
    var button = document.querySelector('.accordion-header button');
    button.classList.toggle('collapsed');
    button.textContent = button.classList.contains('collapsed') ? '+' : '-';
  }

  // Initialize Bootstrap tooltips
  document.addEventListener('DOMContentLoaded', function() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl)
    });

    // Remove <pre> and <code> tags and capitalize comments
    var commentCells = document.querySelectorAll('td[data-bs-toggle="tooltip"]');
    commentCells.forEach(function(cell) {
      var text = cell.innerHTML;
      // Remove <pre> and <code> tags
      text = text.replace(/<\/?pre>/gi, '');
      text = text.replace(/<\/?code>/gi, '');
      // Capitalize the first letter
      text = text.charAt(0).toUpperCase() + text.slice(1);
      cell.innerHTML = text;
    });
  });
</script>

</body>
</html>

adding removing p tags

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    /* Reduce space between td elements and add padding-bottom */
    .table td,
    .table th {
      padding-bottom: 1px;
      white-space: nowrap; /* Prevent text wrap */
      position: relative; /* Enable positioning for hover text */
    }

    .table td:hover::after,
    .table th:hover::after {
      content: attr(data-hover-text);
      position: absolute;
      left: 0;
      top: 100%;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 1000;
      display: block;
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }

    /* Capitalize the first letter of comments */
    .comments p::first-letter {
      text-transform: capitalize;
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Table Headers -->
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th class="accordion-header">
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns(this)">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th class="comments">Column 5</th>
      </tr>
    </thead>
    <tbody>
      <!-- Static Data Rows -->
      <tr>
        <td>Data 1.1</td>
        <td>Data 1.2</td>
        <td>Data 1.3</td>
        <td>Data 1.4</td>
        <td class="extra-column">Data 1.6</td>
        <td class="extra-column">Data 1.7</td>
        <td class="extra-column">Data 1.8</td>
        <td class="extra-column">Data 1.9</td>
        <td class="extra-column">Data 1.10</td>
        <td class="comments">Comment 1.5</td>
      </tr>
      <tr>
        <td>Data 2.1</td>
        <td>Data 2.2</td>
        <td>Data 2.3</td>
        <td>Data 2.4</td>
        <td class="extra-column">Data 2.6</td>
        <td class="extra-column">Data 2.7</td>
        <td class="extra-column">Data 2.8</td>
        <td class="extra-column">Data 2.9</td>
        <td class="extra-column">Data 2.10</td>
        <td class="comments"><p>Comment 2.5</p></td>
      </tr>
      <tr>
        <td>Data 3.1</td>
        <td>Data 3.2</td>
        <td>Data 3.3</td>
        <td>Data 3.4</td>
        <td class="extra-column">Data 3.6</td>
        <td class="extra-column">Data 3.7</td>
        <td class="extra-column">Data 3.8</td>
        <td class="extra-column">Data 3.9</td>
        <td class="extra-column">Data 3.10</td>
        <td class="comments">Comment 3.5</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns(button) {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Check if columns are currently hidden or visible
    var isHidden = Array.from(extraColumns).every(column => column.style.display === 'none' || column.style.display === '');

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      column.style.display = isHidden ? 'table-cell' : 'none';
    });

    // Toggle button text and class for collapsed/expanded state
    button.textContent = isHidden ? '-' : '+';
    button.classList.toggle('collapsed', !isHidden);
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Remove <pre> and <code> tags
    document.querySelectorAll('pre, code').forEach(function(tag) {
      var parent = tag.parentNode;
      while (tag.firstChild) {
        parent.insertBefore(tag.firstChild, tag);
      }
      parent.removeChild(tag);
    });

    // Wrap comments in <p> tags if not already wrapped
    document.querySelectorAll('.comments').forEach(function(td) {
      if (!td.querySelector('p')) {
        var content = td.innerHTML;
        td.innerHTML = '<p>' + content + '</p>';
      }
    });
  });
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>

Captialzie 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    /* Reduce space between td elements and add padding-bottom */
    .table td,
    .table th {
      padding-bottom: 1px;
      white-space: nowrap; /* Prevent text wrap */
      position: relative; /* Enable positioning for hover text */
    }

    .table td:hover::after,
    .table th:hover::after {
      content: attr(data-hover-text);
      position: absolute;
      left: 0;
      top: 100%;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 1000;
      display: block;
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }

    /* Capitalize the first letter of comments */
    .comments p::first-letter {
      text-transform: capitalize;
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Table Headers -->
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th class="accordion-header">
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns(this)">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th class="comments">Column 5</th>
      </tr>
    </thead>
    <tbody>
      <!-- Static Data Rows -->
      <tr>
        <td>Data 1.1</td>
        <td>Data 1.2</td>
        <td>Data 1.3</td>
        <td>Data 1.4</td>
        <td class="extra-column">Data 1.6</td>
        <td class="extra-column">Data 1.7</td>
        <td class="extra-column">Data 1.8</td>
        <td class="extra-column">Data 1.9</td>
        <td class="extra-column">Data 1.10</td>
        <td class="comments">comment 1.5</td>
      </tr>
      <tr>
        <td>Data 2.1</td>
        <td>Data 2.2</td>
        <td>Data 2.3</td>
        <td>Data 2.4</td>
        <td class="extra-column">Data 2.6</td>
        <td class="extra-column">Data 2.7</td>
        <td class="extra-column">Data 2.8</td>
        <td class="extra-column">Data 2.9</td>
        <td class="extra-column">Data 2.10</td>
        <td class="comments"><p>comment 2.5</p></td>
      </tr>
      <tr>
        <td>Data 3.1</td>
        <td>Data 3.2</td>
        <td>Data 3.3</td>
        <td>Data 3.4</td>
        <td class="extra-column">Data 3.6</td>
        <td class="extra-column">Data 3.7</td>
        <td class="extra-column">Data 3.8</td>
        <td class="extra-column">Data 3.9</td>
        <td class="extra-column">Data 3.10</td>
        <td class="comments">comment 3.5</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns(button) {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Check if columns are currently hidden or visible
    var isHidden = Array.from(extraColumns).every(column => column.style.display === 'none' || column.style.display === '');

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      column.style.display = isHidden ? 'table-cell' : 'none';
    });

    // Toggle button text and class for collapsed/expanded state
    button.textContent = isHidden ? '-' : '+';
    button.classList.toggle('collapsed', !isHidden);
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Remove <pre> and <code> tags
    document.querySelectorAll('pre, code').forEach(function(tag) {
      var parent = tag.parentNode;
      while (tag.firstChild) {
        parent.insertBefore(tag.firstChild, tag);
      }
      parent.removeChild(tag);
    });

    // Wrap comments in <p> tags if not already wrapped
    document.querySelectorAll('.comments').forEach(function(td) {
      if (!td.querySelector('p')) {
        var content = td.textContent.trim();
        // Capitalize the first letter of the comment
        var capitalizedContent = content.charAt(0).toUpperCase() + content.slice(1);
        td.innerHTML = '<p>' + capitalizedContent + '</p>';
      }
    });
  });
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>

transition 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    /* Reduce space between td elements and add padding-bottom */
    .table td,
    .table th {
      padding-bottom: 1px;
      white-space: nowrap; /* Prevent text wrap */
      position: relative; /* Enable positioning for hover text */
    }

    .table td:hover::after,
    .table th:hover::after {
      content: attr(data-hover-text);
      position: absolute;
      left: 0;
      top: 100%;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 1000;
      display: block;
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
      transition: display 0.3s ease, width 0.3s ease; /* Add transition for display and width */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }

    /* Capitalize the first letter of comments */
    .comments p::first-letter {
      text-transform: capitalize;
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Table Headers -->
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th class="accordion-header">
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns(this)">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th class="comments">Column 5</th>
      </tr>
    </thead>
    <tbody>
      <!-- Static Data Rows -->
      <tr>
        <td>Data 1.1</td>
        <td>Data 1.2</td>
        <td>Data 1.3</td>
        <td>Data 1.4</td>
        <td class="extra-column">Data 1.6</td>
        <td class="extra-column">Data 1.7</td>
        <td class="extra-column">Data 1.8</td>
        <td class="extra-column">Data 1.9</td>
        <td class="extra-column">Data 1.10</td>
        <td class="comments">comment 1.5</td>
      </tr>
      <tr>
        <td>Data 2.1</td>
        <td>Data 2.2</td>
        <td>Data 2.3</td>
        <td>Data 2.4</td>
        <td class="extra-column">Data 2.6</td>
        <td class="extra-column">Data 2.7</td>
        <td class="extra-column">Data 2.8</td>
        <td class="extra-column">Data 2.9</td>
        <td class="extra-column">Data 2.10</td>
        <td class="comments"><p>comment 2.5</p></td>
      </tr>
      <tr>
        <td>Data 3.1</td>
        <td>Data 3.2</td>
        <td>Data 3.3</td>
        <td>Data 3.4</td>
        <td class="extra-column">Data 3.6</td>
        <td class="extra-column">Data 3.7</td>
        <td class="extra-column">Data 3.8</td>
        <td class="extra-column">Data 3.9</td>
        <td class="extra-column">Data 3.10</td>
        <td class="comments">comment 3.5</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns(button) {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Check if columns are currently hidden or visible
    var isHidden = Array.from(extraColumns).every(column => column.style.display === 'none' || column.style.display === '');

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      if (isHidden) {
        column.style.display = 'table-cell';
      } else {
        column.style.display = 'none';
      }
    });

    // Toggle button text and class for collapsed/expanded state
    button.textContent = isHidden ? '-' : '+';
    button.classList.toggle('collapsed', !isHidden);
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Remove <pre> and <code> tags
    document.querySelectorAll('pre, code').forEach(function(tag) {
      var parent = tag.parentNode;
      while (tag.firstChild) {
        parent.insertBefore(tag.firstChild, tag);
      }
      parent.removeChild(tag);
    });

    // Wrap comments in <p> tags if not already wrapped
    document.querySelectorAll('.comments').forEach(function(td) {
      if (!td.querySelector('p')) {
        var content = td.textContent.trim();
        // Capitalize the first letter of the comment
        var capitalizedContent = content.charAt(0).toUpperCase() + content.slice(1);
        td.innerHTML = '<p>' + capitalizedContent + '</p>';
      }
    });
  });
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


ajax
$(document).ready(function() {
    function validateForm() {
        let allChecked = $('.check').length === $('.check:checked').length;
        let someChecked = $('.check:checked').length > 0;
        let comment = $('#comment').val().trim();
        let allCommentsValid = true;

        $('#partialCommentSection').empty();

        if (someChecked && !allChecked) {
            $('#partialCommentSection').append('<p>Partial check</p>');
            $('.check').each(function() {
                if (!$(this).is(':checked')) {
                    $('#partialCommentSection').append(`<p>${$(this).next('label').text()}:</p>`);
                }
            });
        }

        if (someChecked && !comment) {
            $('#partialCommentSection').append('<p>Please provide comments for all checks</p>');
            allCommentsValid = false;
        }

        if (comment.length === 0 || comment.match(/^[.,\s]*$/)) {
            allCommentsValid = false;
        }

        if (allChecked && comment && allCommentsValid) {
            $('#submitBtn').prop('disabled', false);
        } else {
            $('#submitBtn').prop('disabled', true);
        }
    }

    $('.check').change(function() {
        validateForm();
    });

    $('#comment').on('input', function() {
        validateForm();
    });

    $('#selectAll').change(function() {
        if ($(this).is(':checked')) {
            $('.check').prop('checked', true);
        } else {
            $('.check').prop('checked', false);
        }
        validateForm();
    });
});


ajax v2


$(document).ready(function() {
    var simplemde = new SimpleMDE({ element: $("#comment")[0] });

    function updateCommentBox() {
        let allChecked = $('.check').length === $('.check:checked').length;
        let someChecked = $('.check:checked').length > 0;
        let commentContent = simplemde.value();

        if (allChecked) {
            // Remove "Partial check" and any unchecked items
            commentContent = commentContent.replace(/Partial check\n.*?:.*?\n/g, '');
        } else if (someChecked) {
            // Add "Partial check" and list unchecked items
            let uncheckedItems = [];
            $('.check').each(function() {
                if (!$(this).is(':checked')) {
                    uncheckedItems.push($(this).next('label').text() + ':');
                }
            });
            let uncheckedText = 'Partial check\n' + uncheckedItems.join('\n');
            if (!commentContent.includes('Partial check')) {
                commentContent += '\n' + uncheckedText;
            } else {
                commentContent = commentContent.replace(/Partial check\n.*?:.*?\n/g, uncheckedText + '\n');
            }
        }

        simplemde.value(commentContent.trim());
    }

    function validateForm() {
        let allChecked = $('.check').length === $('.check:checked').length;
        let comment = simplemde.value().trim();

        if (allChecked && comment && !comment.match(/^[.,\s]*$/)) {
            $('#submitBtn').prop('disabled', false);
        } else {
            $('#submitBtn').prop('disabled', true);
        }
    }

    $('.check').change(function() {
        updateCommentBox();
        validateForm();
    });

    $('#selectAll').change(function() {
        if ($(this).is(':checked')) {
            $('.check').prop('checked', true);
        } else {
            $('.check').prop('checked', false);
        }
        updateCommentBox();
        validateForm();
    });

    simplemde.codemirror.on('change', function() {
        validateForm();
    });

    $('#submitBtn').click(function() {
        alert('Update comment and Checkboxes');
    });
});


v4 js and ajax

$(document).ready(function() {
    var simplemde = new SimpleMDE({ element: $("#comment")[0] });
    var firstSubmitClick = true;

    function updateCommentBox() {
        let allChecked = $('.check').length === $('.check:checked').length;
        let someChecked = $('.check:checked').length > 0;
        let commentContent = simplemde.value();

        if (allChecked) {
            // Remove "Partial check" and any unchecked items
            commentContent = commentContent.replace(/Partial check\n(?:.*?:\n)*/g, '');
        } else if (someChecked) {
            // Add "Partial check" and list unchecked items
            let uncheckedItems = [];
            $('.check').each(function() {
                if (!$(this).is(':checked')) {
                    uncheckedItems.push($(this).next('label').text() + ':');
                }
            });
            let uncheckedText = 'Partial check\n' + uncheckedItems.join('\n');
            if (!commentContent.includes('Partial check')) {
                commentContent += '\n' + uncheckedText;
            } else {
                commentContent = commentContent.replace(/Partial check\n(?:.*?:\n)*/g, uncheckedText + '\n');
            }
        }

        simplemde.value(commentContent.trim());
    }

    function validateForm() {
        let allChecked = $('.check').length === $('.check:checked').length;
        let someChecked = $('.check:checked').length > 0;
        let comment = simplemde.value().trim();

        if (allChecked && comment && !comment.match(/^[.,\s]*$/)) {
            return true;
        } else if (!someChecked) {
            alert('Please check at least one checkbox.');
            return false;
        } else if (someChecked && (comment.length === 0 || comment.match(/^[.,\s]*$/))) {
            alert('Please provide a valid comment for the checked items.');
            return false;
        } else {
            return false;
        }
    }

    $('.check').change(function() {
        updateCommentBox();
    });

    $('#selectAll').change(function() {
        if ($(this).is(':checked')) {
            $('.check').prop('checked', true);
        } else {
            $('.check').prop('checked', false);
        }
        updateCommentBox();
    });

    simplemde.codemirror.on('change', function() {
        // Perform any actions needed when the comment content changes
    });

    $('#submitBtn').click(function() {
        handleSubmit();
    });

    window.handleSubmit = function() {
        if (firstSubmitClick) {
            firstSubmitClick = false;
            alert('Update comment and Checkboxes');
        } else {
            if (validateForm()) {
                // Perform the actual form submission here
                alert('Form submitted successfully!');
            } else {
                // Validation alerts are handled within validateForm()
            }
        }
    }
});