<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    /* Reduce space between td elements and add padding-bottom */
    .table td,
    .table th {
      padding-bottom: 1px;
      white-space: nowrap; /* Prevent text wrap */
      position: relative; /* Enable positioning for hover text */
    }

    .table td:hover::after,
    .table th:hover::after {
      content: attr(data-hover-text);
      position: absolute;
      left: 0;
      top: 100%;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 1000;
      display: block;
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Table Headers -->
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th>
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns()">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th>Column 5</th>
      </tr>
    </thead>
    <tbody>
      <!-- Dynamic Data Rows -->
      {% for row in table_data %}
      <tr>
        <td>{{ row.col1 }}</td>
        <td>{{ row.col2 }}</td>
        <td>{{ row.col3 }}</td>
        <td class="extra-column" colspan="5">
          <td>{{ row.extra6 }}</td>
          <td>{{ row.extra7 }}</td>
          <td>{{ row.extra8 }}</td>
          <td>{{ row.extra9 }}</td>
          <td>{{ row.extra10 }}</td>
        </td>
        <td>{{ row.col6 }}</td>
        <td>{{ row.col7 }}</td>
        <td>{{ row.col8 }}</td>
        <td>{{ row.col9 }}</td>
        <td>{{ row.col10 }}</td>
        <td>{{ row.col5 }}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns() {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      column.classList.toggle('d-none'); // Toggle Bootstrap's d-none class to hide/show
    });

    var button = document.querySelector('.accordion-header button');

    // Toggle button text and class for collapsed/expanded state
    if (button.textContent === '+') {
      button.textContent = '-';
      button.classList.add('collapsed');
    } else {
      button.textContent = '+';
      button.classList.remove('collapsed');
    }
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


v2


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    /* Reduce space between td elements and add padding-bottom */
    .table td,
    .table th {
      padding-bottom: 1px;
      white-space: nowrap; /* Prevent text wrap */
      position: relative; /* Enable positioning for hover text */
    }

    .table td:hover::after,
    .table th:hover::after {
      content: attr(data-hover-text);
      position: absolute;
      left: 0;
      top: 100%;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 1000;
      display: block;
    }

    .extra-column {
      display: none; /* Initially hide extra columns */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
      display: block;
      margin: 0 auto; /* Center align the button within the th */
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Table Headers -->
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
        <th>Column 3</th>
        <th class="accordion-header">
          Column 4
          <button class="btn btn-primary" type="button" onclick="toggleExtraColumns(this)">
            +
          </button>
        </th>
        <th class="extra-column">Column 6</th>
        <th class="extra-column">Column 7</th>
        <th class="extra-column">Column 8</th>
        <th class="extra-column">Column 9</th>
        <th class="extra-column">Column 10</th>
        <th>Column 5</th>
      </tr>
    </thead>
    <tbody>
      {% for row in table_data %}
        <tr>
          <td>{{ row.0 }}</td>
          <td>{{ row.1 }}</td>
          <td>{{ row.2 }}</td>
          <td>{{ row.3 }}</td>
          <td class="extra-column">{{ row.5 }}</td>
          <td class="extra-column">{{ row.6 }}</td>
          <td class="extra-column">{{ row.7 }}</td>
          <td class="extra-column">{{ row.8 }}</td>
          <td class="extra-column">{{ row.9 }}</td>
          <td>{{ row.4 }}</td>
        </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

<script>
  function toggleExtraColumns(button) {
    var extraColumns = document.querySelectorAll('.extra-column'); // Select all extra columns

    // Check if columns are currently hidden or visible
    var isHidden = Array.from(extraColumns).every(column => column.style.display === 'none' || column.style.display === '');

    // Toggle visibility of extra columns
    extraColumns.forEach(function(column) {
      column.style.display = isHidden ? 'table-cell' : 'none';
    });

    // Toggle button text and class for collapsed/expanded state
    button.textContent = isHidden ? '-' : '+';
    button.classList.toggle('collapsed', !isHidden);
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>




v4


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accordion with Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table, .table td, .table th {
      border: none;
    }

    /* Add padding-bottom and prevent text wrapping */
    .table td, .table th {
      padding-bottom: 1px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    /* Set initial widths for the columns */
    .table th, .table td {
      width: 150px; /* Adjust as needed */
    }

    /* Tooltips for overflow text */
    .table td[data-hover], .table th[data-hover] {
      position: relative;
    }

    .table td[data-hover]:hover::after, .table th[data-hover]:hover::after {
      content: attr(data-hover);
      position: absolute;
      background: #fff;
      border: 1px solid #ccc;
      padding: 5px;
      white-space: nowrap;
      z-index: 10;
      left: 0;
      top: 100%;
    }

    .accordion-collapse {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease-out;
    }

    .accordion-collapse.show {
      max-height: 1000px; /* Adjust to your preference */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <thead>
      <tr class="accordion-header" id="flush-headingOne">
        <!-- Loop through the first 5 headers -->
        {% for header in headers|slice:":5" %}
        <th data-hover="{{ header }}">{{ header }}</th>
        {% endfor %}
        <th>More
          <button class="btn btn-primary" type="button" onclick="toggleAccordion('collapseOne', this)">+</button>
        </th>
      </tr>
    </thead>
    <tbody>
      <!-- Loop through the rows and display the first 5 columns -->
      {% for row in rows %}
      <tr>
        {% for col in row|slice:":5" %}
        <td data-hover="{{ col }}">{{ col }}</td>
        {% endfor %}
        <td></td>
      </tr>
      {% endfor %}
    </tbody>
    <tbody id="collapseOne" class="accordion-collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
      <tr>
        <!-- Display the remaining 5 headers -->
        {% for header in headers|slice:"5:" %}
        <th data-hover="{{ header }}">{{ header }}</th>
        {% endfor %}
      </tr>
      <!-- Loop through the rows and display the remaining 5 columns -->
      {% for row in rows %}
      <tr>
        {% for col in row|slice:"5:" %}
        <td data-hover="{{ col }}">{{ col }}</td>
        {% endfor %}
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

<script>
  function toggleAccordion(collapseId, button) {
    var collapseElement = document.getElementById(collapseId);
    var allCollapseElements = document.querySelectorAll('.accordion-collapse');
    var allButtons = document.querySelectorAll('.accordion-header button');

    // Close all other accordion items
    allCollapseElements.forEach(function(item) {
      if (item.id !== collapseId) {
        item.style.transition = 'max-height 0.2s ease-out'; // Set closing transition
        item.classList.remove('show');
        item.style.maxHeight = item.scrollHeight + 'px'; // Set to current height for smooth collapse
        setTimeout(() => {
          item.style.maxHeight = '0px';
        }, 10); // Allow time for DOM update for animation
      }
    });

    // Reset all other buttons to +
    allButtons.forEach(function(btn) {
      if (btn !== button) {
        btn.textContent = '+';
        btn.classList.add('collapsed');
      }
    });

    // Toggle the clicked accordion item
    collapseElement.classList.toggle('show');

    // Toggle the button text and state
    var collapsed = !collapseElement.classList.contains('show');
    button.textContent = collapsed ? '+' : '-';
    button.classList.toggle('collapsed', collapsed);

    // Set transition for opening and closing
    if (collapseElement.classList.contains('show')) {
      collapseElement.style.transition = 'max-height 0.3s ease-out'; // Set opening transition
      collapseElement.style.maxHeight = collapseElement.scrollHeight + 'px';
      adjustColumnWidths('expand');
    } else {
      collapseElement.style.transition = 'max-height 0.2s ease-out'; // Set closing transition
      collapseElement.style.maxHeight = collapseElement.scrollHeight + 'px'; // Set to current height for smooth collapse
      setTimeout(() => {
        collapseElement.style.maxHeight = '0px';
        adjustColumnWidths('collapse');
      }, 10); // Allow time for DOM update for animation
    }
  }

  function adjustColumnWidths(state) {
    var columns = document.querySelectorAll('.table th, .table td');
    if (state === 'expand') {
      columns.forEach(function(column) {
        column.style.width = '200px'; // Adjust as needed for expanded state
      });
    } else {
      columns.forEach(function(column) {
        column.style.width = '150px'; // Adjust as needed for collapsed state
      });
    }
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>