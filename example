collapseElement.style.maxHeight = '0px';
      }, 10); // Allow time for DOM update for animation
    }
  }

  // Add an event listener for accordion changes to adjust text size
  document.querySelectorAll('.accordion-collapse').forEach(item => {
    item.addEventListener('transitionend', () => {
      if (item.classList.contains('show')) {
        table.classList.add('reduce-text-size'); // Reduce text size
      } else if (document.querySelectorAll('.accordion-collapse.show').length === 0) {
        table.classList.remove('reduce-text-size'); // Reset text size if no accordion items are open
      }
    });
  });
});

</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accordion with Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    .accordion-collapse {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease-out;
    }

    .accordion-collapse.show {
      max-height: 1000px; /* Adjust to your preference */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }

    .reduce-text-size td, .reduce-text-size th {
      font-size: 0.8em; /* Adjust as needed */
    }
  </style>
</head>
<body>

<!-- Filter Input and Button -->
<div class="d-flex justify-content-between align-items-center mb-3">
  <input type="text" id="searchInput" class="form-control w-50" placeholder="Search...">
  <button class="btn btn-secondary" type="button" data-bs-toggle="modal" data-bs-target="#filterModal">Filter</button>
  <button class="btn btn-danger" id="clearFiltersBtn">Clear Filters</button>
</div>

<!-- Sorting Dropdown -->
<div class="d-flex justify-content-between align-items-center mb-3">
  <select id="sortColumn" class="form-select w-25">
    <option value="">Sort by column...</option>
  </select>
  <select id="sortOrder" class="form-select w-25">
    <option value="asc">Ascending</option>
    <option value="desc">Descending</option>
  </select>
  <button class="btn btn-primary" id="applySortBtn">Sort</button>
</div>

<!-- Filter Modal -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="filterModalLabel">Filter Columns</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="text" id="filterSearchInput" class="form-control mb-3" placeholder="Search columns...">
        <div id="filterCheckboxes">
          <!-- Checkboxes will be added dynamically -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" id="applyFiltersBtn" data-bs-dismiss="modal">Apply Filters</button>
      </div>
    </div>
  </div>
</div>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table" id="mainTable">
    <!-- Table content remains unchanged -->
  </table>
</div>

<script>
  const table = document.querySelector('.table');
  const searchInput = document.getElementById('searchInput');
  const filterSearchInput = document.getElementById('filterSearchInput');
  const filterCheckboxes = document.getElementById('filterCheckboxes');
  const clearFiltersBtn = document.getElementById('clearFiltersBtn');
  const applyFiltersBtn = document.getElementById('applyFiltersBtn');
  const sortColumn = document.getElementById('sortColumn');
  const sortOrder = document.getElementById('sortOrder');
  const applySortBtn = document.getElementById('applySortBtn');

  function getColumnNames() {
    const headers = table.querySelectorAll('th');
    const columnNames = [];
    headers.forEach(header => {
      columnNames.push(header.innerText);
    });
    return columnNames;
  }

  function populateFilterCheckboxes() {
    const columnNames = getColumnNames();
    filterCheckboxes.innerHTML = '';
    columnNames.forEach(name => {
      const checkbox = document.createElement('div');
      checkbox.classList.add('form-check');
      checkbox.innerHTML = `
        <input class="form-check-input" type="checkbox" value="${name}" id="filter-${name}">
        <label class="form-check-label" for="filter-${name}">${name}</label>
      `;
      filterCheckboxes.appendChild(checkbox);
    });
  }

  function populateSortDropdown() {
    const columnNames = getColumnNames();
    sortColumn.innerHTML = '<option value="">Sort by column...</option>';
    columnNames.forEach((name, index) => {
      const option = document.createElement('option');
      option.value = index;
      option.textContent = name;
      sortColumn.appendChild(option);
    });
  }

  function filterTable() {
    const searchText = searchInput.value.toLowerCase();
    const checkedColumns = [...filterCheckboxes.querySelectorAll('input:checked')].map(input => input.value);

    table.querySelectorAll('tbody tr').forEach(row => {
      let rowText = '';
      row.querySelectorAll('td').forEach((cell, index) => {
        if (checkedColumns.includes(getColumnNames()[index])) {
          rowText += cell.innerText.toLowerCase() + ' ';
        }
      });

      if (rowText.includes(searchText)) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  }

  function sortTable() {
    const columnIndex = parseInt(sortColumn.value);
    const order = sortOrder.value;
    const rows = Array.from(table.querySelectorAll('tbody tr'));

    rows.sort((a, b) => {
      const aText = a.querySelectorAll('td')[columnIndex].innerText;
      const bText = b.querySelectorAll('td')[columnIndex].innerText;

      if (aText < bText) {
        return order === 'asc' ? -1 : 1;
      }
      if (aText > bText) {
        return order === 'asc' ? 1 : -1;
      }
      return 0;
    });

    rows.forEach(row => table.querySelector('tbody').appendChild(row));
  }

  searchInput.addEventListener('input', filterTable);
  applyFiltersBtn.addEventListener('click', filterTable);
  filterSearchInput.addEventListener('input', () => {
    const searchText = filterSearchInput.value.toLowerCase();
    filterCheckboxes.querySelectorAll('.form-check').forEach(checkbox => {
      if (checkbox.innerText.toLowerCase().includes(searchText)) {
        checkbox.style.display = '';
      } else {
        checkbox.style.display = 'none';
      }
    });
  });

  clearFiltersBtn.addEventListener('click', () => {
    searchInput.value = '';
    filterCheckboxes.querySelectorAll('input').forEach(input => {
      input.checked = false;
    });
    filterTable();
  });

  applySortBtn.addEventListener('click', sortTable);

  document.addEventListener('DOMContentLoaded', () => {
    populateFilterCheckboxes();
    populateSortDropdown();
  });

  function toggleAccordion(collapseId, button) {
    var collapseElement = document.getElementById(collapseId);
    var allCollapseElements = document.querySelectorAll('.accordion-collapse');
    var allButtons = document.querySelectorAll('.accordion-header button');

    // Close all other accordion items
    allCollapseElements.forEach(function(item) {
      if (item.id !== collapseId) {
        item.style.transition = 'max-height 0.2s ease-out'; // Set closing transition
        item.classList.remove('show');
        item.style.maxHeight = item.scrollHeight + 'px'; // Set to current height for smooth collapse
        setTimeout(() => {
          item.style.maxHeight = '0px';
        }, 10); // Allow time for DOM update for animation
      }
    });

    // Reset all other buttons to +
    allButtons.forEach(function(btn) {
      if (btn !== button) {
        btn.textContent = '+';
        btn.classList.add('collapsed');
      }
    });

    // Toggle the clicked accordion item
    collapseElement.classList.toggle('show');

    // Toggle the button text and state
    var collapsed = !collapseElement.classList.contains('show');
    button.textContent = collapsed ? '+' : '-';
    button.classList.toggle('collapsed', collapsed);

    // Set transition for opening and closing
    if (collapseElement.classList.contains('show')) {
      collapseElement.style.transition = 'max-height 0.3s ease-out'; // Set opening transition
      collapseElement.style.maxHeight = collapseElement.scrollHeight + 'px';
      table.classList.add('reduce-text-size'); // Reduce text size
    } else {
      collapseElement.style.transition = 'max-height 0.2s ease-out'; // Set closing transition
      collapseElement.style.maxHeight = collapseElement.scrollHeight + 'px'; // Set to current height for smooth collapse
      setTimeout(() => {