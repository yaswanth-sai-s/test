


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accordion with Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    .accordion-collapse {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease-out;
    }

    .accordion-collapse.show {
      max-height: 1000px; /* Adjust to your preference */
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Accordion Item #1 -->
    <tr class="accordion-header" id="flush-headingOne">
      <td>Extra 1</td>
      <td>Extra 2</td>
      <td>Extra 3</td>
      <td>Accordion Item #1</td>
      <td><button class="btn btn-primary" type="button" onclick="toggleAccordion('collapseOne', this)">
        +
      </button></td>
    </tr>
    <tr>
      <td colspan="5">
        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
          <table class="table">
            <tr>
              <td>Content 1</td>
              <td>Content 2</td>
              <td>Content 3</td>
              <td>Content 4</td>
            </tr>
            <tr>
              <td>Content 5</td>
              <td>Content 6</td>
              <td>Content 7</td>
              <td>Content 8</td>
            </tr>
          </table>
        </div>
      </td>
    </tr>

    <!-- Accordion Item #2 -->
    <tr class="accordion-header" id="flush-headingTwo">
      <td>Extra 1</td>
      <td>Extra 2</td>
      <td>Extra 3</td>
      <td>Accordion Item #2</td>
      <td><button class="btn btn-primary" type="button" onclick="toggleAccordion('collapseTwo', this)">
        +
      </button></td>
    </tr>
    <tr>
      <td colspan="5">
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="flush-headingTwo" data-bs-parent="#accordionFlushExample">
          <table class="table">
            <tr>
              <td>Content A</td>
              <td>Content B</td>
              <td>Content C</td>
              <td>Content D</td>
            </tr>
            <tr>
              <td>Content E</td>
              <td>Content F</td>
              <td>Content G</td>
              <td>Content H</td>
            </tr>
          </table>
        </div>
      </td>
    </tr>

    <!-- Accordion Item #3 -->
    <tr class="accordion-header" id="flush-headingThree">
      <td>Extra 1</td>
      <td>Extra 2</td>
      <td>Extra 3</td>
      <td>Accordion Item #3</td>
      <td><button class="btn btn-primary" type="button" onclick="toggleAccordion('collapseThree', this)">
        +
      </button></td>
    </tr>
    <tr>
      <td colspan="5">
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="flush-headingThree" data-bs-parent="#accordionFlushExample">
          <table class="table">
            <tr>
              <td>Content X</td>
              <td>Content Y</td>
              <td>Content Z</td>
              <td>Content W</td>
            </tr>
            <tr>
              <td>Content P</td>
              <td>Content Q</td>
              <td>Content R</td>
              <td>Content S</td>
            </tr>
          </table>
        </div>
      </td>
    </tr>
  </table>
</div>

<script>
  function toggleAccordion(collapseId, button) {
    var collapseElement = document.getElementById(collapseId);
    var allCollapseElements = document.querySelectorAll('.accordion-collapse');
    var allButtons = document.querySelectorAll('.accordion-header button');

    // Close all other accordion items
    allCollapseElements.forEach(function(item) {
      if (item.id !== collapseId) {
        item.style.transition = 'max-height 0.2s ease-out'; // Set closing transition
        item.classList.remove('show');
        item.style.maxHeight = item.scrollHeight + 'px'; // Set to current height for smooth collapse
        setTimeout(() => {
          item.style.maxHeight = '0px';
        }, 10); // Allow time for DOM update for animation
      }
    });

    // Reset all other buttons to +
    allButtons.forEach(function(btn) {
      if (btn !== button) {
        btn.textContent = '+';
        btn.classList.add('collapsed');
      }
    });

    // Toggle the clicked accordion item
    collapseElement.classList.toggle('show');

    // Toggle the button text and state
    var collapsed = !collapseElement.classList.contains('show');
    button.textContent = collapsed ? '+' : '-';
    button.classList.toggle('collapsed', collapsed);

    // Set transition for opening and closing
    if (collapseElement.classList.contains('show')) {
      collapseElement.style.transition = 'max-height 0.3s ease-out'; // Set opening transition
      collapseElement.style.maxHeight = collapseElement.scrollHeight + 'px';
    } else {
      collapseElement.style.transition = 'max-height 0.2s ease-out'; // Set closing transition
      collapseElement.style.maxHeight = collapseElement.scrollHeight + 'px'; // Set to current height for smooth collapse
      setTimeout(() => {
        collapseElement.style.maxHeight = '0px';
      }, 10); // Allow time for DOM update for animation
    }
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


v2 expanding columns


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accordion with Dynamic Columns</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    .accordion-collapse {
      display: none;
    }

    .accordion-collapse.show {
      display: table-cell;
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <thead>
      <tr class="accordion-header" id="flush-headingOne">
        <th>Extra 1</th>
        <th>Extra 2</th>
        <th>Extra 3</th>
        <th>Accordion Item #1</th>
        <th><button class="btn btn-primary collapsed" type="button" onclick="toggleAccordion('collapseOne', this)">+</button></th>
      </tr>
    </thead>
    <tbody>
      <tr id="header-extra" class="accordion-collapse">
        <th>Expanded 1</th>
        <th>Expanded 2</th>
        <th>Expanded 3</th>
        <th>Expanded 4</th>
      </tr>
      <tr>
        <td>Content 1</td>
        <td>Content 2</td>
        <td>Content 3</td>
        <td>Content 4</td>
        <td class="accordion-collapse"></td>
      </tr>
      <tr>
        <td>Content 5</td>
        <td>Content 6</td>
        <td>Content 7</td>
        <td>Content 8</td>
        <td class="accordion-collapse"></td>
      </tr>
    </tbody>

    <thead>
      <tr class="accordion-header" id="flush-headingTwo">
        <th>Extra 1</th>
        <th>Extra 2</th>
        <th>Extra 3</th>
        <th>Accordion Item #2</th>
        <th><button class="btn btn-primary collapsed" type="button" onclick="toggleAccordion('collapseTwo', this)">+</button></th>
      </tr>
    </thead>
    <tbody>
      <tr id="header-extra-two" class="accordion-collapse">
        <th>Expanded A</th>
        <th>Expanded B</th>
        <th>Expanded C</th>
        <th>Expanded D</th>
      </tr>
      <tr>
        <td>Content A</td>
        <td>Content B</td>
        <td>Content C</td>
        <td>Content D</td>
        <td class="accordion-collapse"></td>
      </tr>
      <tr>
        <td>Content E</td>
        <td>Content F</td>
        <td>Content G</td>
        <td>Content H</td>
        <td class="accordion-collapse"></td>
      </tr>
    </tbody>

    <thead>
      <tr class="accordion-header" id="flush-headingThree">
        <th>Extra 1</th>
        <th>Extra 2</th>
        <th>Extra 3</th>
        <th>Accordion Item #3</th>
        <th><button class="btn btn-primary collapsed" type="button" onclick="toggleAccordion('collapseThree', this)">+</button></th>
      </tr>
    </thead>
    <tbody>
      <tr id="header-extra-three" class="accordion-collapse">
        <th>Expanded X</th>
        <th>Expanded Y</th>
        <th>Expanded Z</th>
        <th>Expanded W</th>
      </tr>
      <tr>
        <td>Content X</td>
        <td>Content Y</td>
        <td>Content Z</td>
        <td>Content W</td>
        <td class="accordion-collapse"></td>
      </tr>
      <tr>
        <td>Content P</td>
        <td>Content Q</td>
        <td>Content R</td>
        <td>Content S</td>
        <td class="accordion-collapse"></td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  function toggleAccordion(collapseId, button) {
    var allCollapseElements = document.querySelectorAll('.accordion-collapse');
    var allButtons = document.querySelectorAll('.accordion-header button');
    var targetCollapseElements = document.querySelectorAll('#' + collapseId + ' + tr .accordion-collapse');

    // Close all other accordion items
    allCollapseElements.forEach(function(item) {
      if (!item.parentElement.previousElementSibling.id.includes(collapseId)) {
        item.classList.remove('show');
      }
    });

    // Reset all other buttons to +
    allButtons.forEach(function(btn) {
      if (btn !== button) {
        btn.textContent = '+';
        btn.classList.add('collapsed');
      }
    });

    // Toggle the clicked accordion item
    targetCollapseElements.forEach(function(item) {
      item.classList.toggle('show');
    });

    // Toggle the button text and state
    var collapsed = !targetCollapseElements[0].classList.contains('show');
    button.textContent = collapsed ? '+' : '-';
    button.classList.toggle('collapsed', collapsed);
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


v3

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accordion with Dynamic Columns</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Accordion Header -->
    <thead>
      <tr class="accordion-header" id="flush-headingOne">
        <th>Extra 1</th>
        <th>Extra 2</th>
        <th>Extra 3</th>
        <th>
          Accordion Item #1
          <button class="btn btn-primary" type="button" onclick="toggleAccordion('flush-headingOne', this)">+</button>
        </th>
      </tr>
    </thead>
    <!-- Accordion Body -->
    <tbody id="accordion-body-one">
      <tr>
        <td>Content 1</td>
        <td>Content 2</td>
        <td>Content 3</td>
      </tr>
      <tr>
        <td>Content 4</td>
        <td>Content 5</td>
        <td>Content 6</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  function toggleAccordion(collapseId, button) {
    const accordionBody = document.getElementById(`accordion-body-${collapseId}`);
    const isCollapsed = button.textContent === '+';

    if (isCollapsed) {
      // Add additional columns dynamically
      const headers = ['Extra Header 1', 'Extra Header 2', 'Extra Header 3'];
      const data = [
        ['Extra Content A', 'Extra Content B', 'Extra Content C'],
        ['Extra Content D', 'Extra Content E', 'Extra Content F']
      ];

      // Create header cells
      const headerRow = accordionBody.nextElementSibling.querySelector('tr');
      headers.forEach(headerText => {
        const th = document.createElement('th');
        th.textContent = headerText;
        headerRow.appendChild(th);
      });

      // Create data rows
      data.forEach(rowData => {
        const row = document.createElement('tr');
        rowData.forEach(cellData => {
          const td = document.createElement('td');
          td.textContent = cellData;
          row.appendChild(td);
        });
        accordionBody.appendChild(row);
      });

      button.textContent = '-';
    } else {
      // Remove additional columns dynamically
      const headerRow = accordionBody.nextElementSibling.querySelector('tr');
      const dataRows = accordionBody.querySelectorAll('tr');

      // Remove header cells
      for (let i = 0; i < 3; i++) {
        headerRow.removeChild(headerRow.lastElementChild);
      }

      // Remove data cells
      dataRows.forEach(row => {
        for (let i = 0; i < 3; i++) {
          row.removeChild(row.lastElementChild);
        }
      });

      button.textContent = '+';
    }
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


v4

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accordion with Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Accordion Header -->
    <thead>
      <tr class="accordion-header" id="accordion-extra">
        <th>Extra 1</th>
        <th>Extra 2</th>
        <th>Extra 3</th>
        <th>
          Accordion Item
          <button class="btn btn-primary" type="button" onclick="toggleAccordion(this)">+</button>
        </th>
      </tr>
    </thead>
    <!-- Accordion Body -->
    <tbody id="accordion-body">
      <tr>
        <td>Content 1</td>
        <td>Content 2</td>
        <td>Content 3</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  let isExpanded = false;
  const extraHeaders = ['Extra Header 1', 'Extra Header 2', 'Extra Header 3'];
  const extraContents = ['Extra Content 1', 'Extra Content 2', 'Extra Content 3'];

  function toggleAccordion(button) {
    const accordionHeader = document.getElementById('accordion-extra');
    const accordionBody = document.getElementById('accordion-body');

    if (!isExpanded) {
      // Expand accordion
      extraHeaders.forEach(header => {
        const th = document.createElement('th');
        th.textContent = header;
        accordionHeader.appendChild(th);
      });

      extraContents.forEach(content => {
        const td = document.createElement('td');
        td.textContent = content;
        accordionBody.firstElementChild.appendChild(td);
      });

      button.textContent = '-';
      isExpanded = true;
    } else {
      // Collapse accordion
      const thCount = extraHeaders.length;
      for (let i = 0; i < thCount; i++) {
        accordionHeader.lastElementChild.remove();
        accordionBody.firstElementChild.lastElementChild.remove();
      }

      button.textContent = '+';
      isExpanded = false;
    }
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>



v5 


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accordion with Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }

    .accordion-collapse {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.5s ease-out;
    }

    .accordion-collapse.show {
      max-height: 1000px; /* Adjust to your preference */
      transition: max-height 0.5s ease-in;
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Accordion Header -->
    <thead>
      <tr class="accordion-header" id="accordion-extra">
        <th>Extra 1</th>
        <th>Extra 2</th>
        <th>Extra 3</th>
        <th>
          Accordion Item
          <button class="btn btn-primary" type="button" onclick="toggleAccordion(this)">+</button>
        </th>
      </tr>
    </thead>
    <!-- Accordion Body -->
    <tbody id="accordion-body" class="accordion-collapse">
      <tr>
        <td>Content 1</td>
        <td>Content 2</td>
        <td>Content 3</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  let isExpanded = false;
  const extraHeaders = ['Extra Header 1', 'Extra Header 2', 'Extra Header 3'];
  const extraContents = ['Extra Content 1', 'Extra Content 2', 'Extra Content 3'];

  function toggleAccordion(button) {
    const accordionHeader = document.getElementById('accordion-extra');
    const accordionBody = document.getElementById('accordion-body');

    if (!isExpanded) {
      // Expand accordion
      extraHeaders.forEach(header => {
        const th = document.createElement('th');
        th.textContent = header;
        accordionHeader.appendChild(th);
      });

      extraContents.forEach(content => {
        const td = document.createElement('td');
        td.textContent = content;
        accordionBody.firstElementChild.appendChild(td);
      });

      accordionBody.classList.add('show');
      button.textContent = '-';
      isExpanded = true;
    } else {
      // Collapse accordion
      const thCount = extraHeaders.length;
      for (let i = 0; i < thCount; i++) {
        accordionHeader.lastElementChild.remove();
        accordionBody.firstElementChild.lastElementChild.remove();
      }

      accordionBody.classList.remove('show');
      button.textContent = '+';
      isExpanded = false;
    }
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>



js
<script>
  let isExpanded = false;
  const extraHeaders = ['Extra Header 1', 'Extra Header 2', 'Extra Header 3'];
  const extraContents = ['Extra Content 1', 'Extra Content 2', 'Extra Content 3'];

  function toggleAccordion(button) {
    const accordionHeader = document.getElementById('accordion-extra');
    const accordionBody = document.getElementById('accordion-body');

    if (!isExpanded) {
      // Expand accordion
      extraHeaders.forEach(header => {
        const th = document.createElement('th');
        th.textContent = header;
        accordionHeader.appendChild(th);
      });

      extraContents.forEach(content => {
        const td = document.createElement('td');
        td.textContent = content;
        accordionBody.firstElementChild.appendChild(td);
      });

      accordionBody.classList.add('show');
      button.textContent = '-';
      isExpanded = true;
    } else {
      // Collapse accordion
      const thCount = extraHeaders.length;
      for (let i = 0; i < thCount; i++) {
        accordionHeader.removeChild(accordionHeader.lastElementChild);
        accordionBody.firstElementChild.removeChild(accordionBody.firstElementChild.lastElementChild);
      }

      accordionBody.classList.remove('show');
      button.textContent = '+';
      isExpanded = false;
    }
  }
</script>


new code


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accordion with Table</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Remove border lines from all tables */
    .table,
    .table td,
    .table th {
      border: none;
    }

    .accordion-header button {
      transition: transform 0.3s ease-in-out;
    }

    .accordion-header button.collapsed {
      transform: rotate(180deg);
    }

    .extra-column {
      max-width: 0;
      overflow: hidden;
      transition: max-width 0.5s ease-out;
      white-space: nowrap;
    }

    .extra-column.show {
      max-width: 150px; /* Adjust width as needed */
    }
  </style>
</head>
<body>

<div class="accordion accordion-flush" id="accordionFlushExample">
  <table class="table">
    <!-- Accordion Header -->
    <thead>
      <tr class="accordion-header" id="accordion-extra">
        <th>Extra 1</th>
        <th>Extra 2</th>
        <th>Extra 3</th>
        <th>
          Accordion Item
          <button class="btn btn-primary" type="button" onclick="toggleAccordion(this)">+</button>
        </th>
      </tr>
    </thead>
    <!-- Accordion Body -->
    <tbody id="accordion-body">
      <tr>
        <td>Content 1</td>
        <td>Content 2</td>
        <td>Content 3</td>
        <td>Content 4</td>
      </tr>
      <tr>
        <td>Content 5</td>
        <td>Content 6</td>
        <td>Content 7</td>
        <td>Content 8</td>
      </tr>
      <tr>
        <td>Content X</td>
        <td>Content Y</td>
        <td>Content Z</td>
        <td>Content W</td>
      </tr>
      <tr>
        <td>Content P</td>
        <td>Content Q</td>
        <td>Content R</td>
        <td>Content S</td>
      </tr>
    </tbody>
  </table>
</div>

<script>
  let isExpanded = false;
  const extraHeaders = ['Extra Header 1', 'Extra Header 2', 'Extra Header 3'];
  const extraContents = ['Extra Content 1', 'Extra Content 2', 'Extra Content 3'];

  function toggleAccordion(button) {
    const accordionHeader = document.getElementById('accordion-extra');
    const accordionBody = document.getElementById('accordion-body');

    if (!isExpanded) {
      // Expand accordion
      extraHeaders.forEach(header => {
        const th = document.createElement('th');
        th.textContent = header;
        th.classList.add('extra-column', 'show');
        accordionHeader.appendChild(th);
      });

      accordionBody.querySelectorAll('tr').forEach((row, index) => {
        extraContents.forEach(content => {
          const td = document.createElement('td');
          td.textContent = content;
          td.classList.add('extra-column', 'show');
          row.appendChild(td);
        });
      });

      button.textContent = '-';
      isExpanded = true;
    } else {
      // Collapse accordion
      accordionHeader.querySelectorAll('.extra-column').forEach(th => {
        th.classList.remove('show');
      });

      accordionBody.querySelectorAll('tr').forEach(row => {
        row.querySelectorAll('.extra-column').forEach(td => {
          td.classList.remove('show');
        });
      });

      setTimeout(() => {
        accordionHeader.querySelectorAll('.extra-column').forEach(th => {
          accordionHeader.removeChild(th);
        });

        accordionBody.querySelectorAll('tr').forEach(row => {
          row.querySelectorAll('.extra-column').forEach(td => {
            row.removeChild(td);
          });
        });
      }, 500); // Match this with CSS transition time

      button.textContent = '+';
      isExpanded = false;
    }
  }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>